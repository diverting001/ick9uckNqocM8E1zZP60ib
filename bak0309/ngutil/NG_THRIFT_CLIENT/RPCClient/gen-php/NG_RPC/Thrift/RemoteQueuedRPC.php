<?php
namespace NG_RPC\Thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface RemoteQueuedRPCIf {
  /**
   * @param string $script_name
   * @param string $param_string
   * @param int $timeout
   * @param string $filter_conditions
   * @return string
   */
  public function dispatchScriptCommandTaskSimple($script_name, $param_string, $timeout, $filter_conditions);
  /**
   * @param string $script_name
   * @param string $param_string
   * @param int $timeout
   * @param int $access_token_ttl
   * @param bool $durability
   * @param int $idempotent_level
   * @param string $filter_conditions
   * @return string
   */
  public function dispatchScriptCommandTask($script_name, $param_string, $timeout, $access_token_ttl, $durability, $idempotent_level, $filter_conditions);
  /**
   * @param string $domain
   * @param string $input
   * @param string $worker_space
   * @param string $filter_conditions
   * @return string
   */
  public function dispatchWebShellCallTask($domain, $input, $worker_space, $filter_conditions);
  /**
   * @param string $worker_name
   * @param string $job_data
   * @param int $timeout
   * @param int $access_token_ttl
   * @param bool $durability
   * @param int $idempotent_level
   * @param string $identifier
   * @param string $filter_conditions
   * @return string
   */
  public function dispatchTask($worker_name, $job_data, $timeout, $access_token_ttl, $durability, $idempotent_level, $identifier, $filter_conditions);
  /**
   * @param string $access_token
   * @return string
   */
  public function getJobState($access_token);
  /**
   * @param string $script_name
   * @param string $param_string
   * @param int $timeout
   * @param string $filter_conditions
   */
  public function dispatchScriptCommandTaskSimpleNoReply($script_name, $param_string, $timeout, $filter_conditions);
  /**
   * @param string $script_name
   * @param string $param_string
   * @param int $timeout
   * @param int $access_token_ttl
   * @param bool $durability
   * @param int $idempotent_level
   * @param string $filter_conditions
   */
  public function dispatchScriptCommandTaskNoReply($script_name, $param_string, $timeout, $access_token_ttl, $durability, $idempotent_level, $filter_conditions);
  /**
   * @param string $worker_name
   * @param string $job_data
   * @param int $timeout
   * @param int $access_token_ttl
   * @param bool $durability
   * @param int $idempotent_level
   * @param string $identifier
   * @param string $filter_conditions
   */
  public function dispatchTaskNoReply($worker_name, $job_data, $timeout, $access_token_ttl, $durability, $idempotent_level, $identifier, $filter_conditions);
}

class RemoteQueuedRPCClient implements \NG_RPC\Thrift\RemoteQueuedRPCIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function dispatchScriptCommandTaskSimple($script_name, $param_string, $timeout, $filter_conditions)
  {
    $this->send_dispatchScriptCommandTaskSimple($script_name, $param_string, $timeout, $filter_conditions);
    return $this->recv_dispatchScriptCommandTaskSimple();
  }

  public function send_dispatchScriptCommandTaskSimple($script_name, $param_string, $timeout, $filter_conditions)
  {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskSimple_args();
    $args->script_name = $script_name;
    $args->param_string = $param_string;
    $args->timeout = $timeout;
    $args->filter_conditions = $filter_conditions;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dispatchScriptCommandTaskSimple', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dispatchScriptCommandTaskSimple', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dispatchScriptCommandTaskSimple()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskSimple_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskSimple_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("dispatchScriptCommandTaskSimple failed: unknown result");
  }

  public function dispatchScriptCommandTask($script_name, $param_string, $timeout, $access_token_ttl, $durability, $idempotent_level, $filter_conditions)
  {
    $this->send_dispatchScriptCommandTask($script_name, $param_string, $timeout, $access_token_ttl, $durability, $idempotent_level, $filter_conditions);
    return $this->recv_dispatchScriptCommandTask();
  }

  public function send_dispatchScriptCommandTask($script_name, $param_string, $timeout, $access_token_ttl, $durability, $idempotent_level, $filter_conditions)
  {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTask_args();
    $args->script_name = $script_name;
    $args->param_string = $param_string;
    $args->timeout = $timeout;
    $args->access_token_ttl = $access_token_ttl;
    $args->durability = $durability;
    $args->idempotent_level = $idempotent_level;
    $args->filter_conditions = $filter_conditions;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dispatchScriptCommandTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dispatchScriptCommandTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dispatchScriptCommandTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("dispatchScriptCommandTask failed: unknown result");
  }

  public function dispatchWebShellCallTask($domain, $input, $worker_space, $filter_conditions)
  {
    $this->send_dispatchWebShellCallTask($domain, $input, $worker_space, $filter_conditions);
    return $this->recv_dispatchWebShellCallTask();
  }

  public function send_dispatchWebShellCallTask($domain, $input, $worker_space, $filter_conditions)
  {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchWebShellCallTask_args();
    $args->domain = $domain;
    $args->input = $input;
    $args->worker_space = $worker_space;
    $args->filter_conditions = $filter_conditions;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dispatchWebShellCallTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dispatchWebShellCallTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dispatchWebShellCallTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\NG_RPC\Thrift\RemoteQueuedRPC_dispatchWebShellCallTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchWebShellCallTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("dispatchWebShellCallTask failed: unknown result");
  }

  public function dispatchTask($worker_name, $job_data, $timeout, $access_token_ttl, $durability, $idempotent_level, $identifier, $filter_conditions)
  {
    $this->send_dispatchTask($worker_name, $job_data, $timeout, $access_token_ttl, $durability, $idempotent_level, $identifier, $filter_conditions);
    return $this->recv_dispatchTask();
  }

  public function send_dispatchTask($worker_name, $job_data, $timeout, $access_token_ttl, $durability, $idempotent_level, $identifier, $filter_conditions)
  {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchTask_args();
    $args->worker_name = $worker_name;
    $args->job_data = $job_data;
    $args->timeout = $timeout;
    $args->access_token_ttl = $access_token_ttl;
    $args->durability = $durability;
    $args->idempotent_level = $idempotent_level;
    $args->identifier = $identifier;
    $args->filter_conditions = $filter_conditions;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dispatchTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dispatchTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dispatchTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\NG_RPC\Thrift\RemoteQueuedRPC_dispatchTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("dispatchTask failed: unknown result");
  }

  public function getJobState($access_token)
  {
    $this->send_getJobState($access_token);
    return $this->recv_getJobState();
  }

  public function send_getJobState($access_token)
  {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_getJobState_args();
    $args->access_token = $access_token;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getJobState', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getJobState', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getJobState()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\NG_RPC\Thrift\RemoteQueuedRPC_getJobState_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \NG_RPC\Thrift\RemoteQueuedRPC_getJobState_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getJobState failed: unknown result");
  }

  public function dispatchScriptCommandTaskSimpleNoReply($script_name, $param_string, $timeout, $filter_conditions)
  {
    $this->send_dispatchScriptCommandTaskSimpleNoReply($script_name, $param_string, $timeout, $filter_conditions);
  }

  public function send_dispatchScriptCommandTaskSimpleNoReply($script_name, $param_string, $timeout, $filter_conditions)
  {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskSimpleNoReply_args();
    $args->script_name = $script_name;
    $args->param_string = $param_string;
    $args->timeout = $timeout;
    $args->filter_conditions = $filter_conditions;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dispatchScriptCommandTaskSimpleNoReply', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dispatchScriptCommandTaskSimpleNoReply', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function dispatchScriptCommandTaskNoReply($script_name, $param_string, $timeout, $access_token_ttl, $durability, $idempotent_level, $filter_conditions)
  {
    $this->send_dispatchScriptCommandTaskNoReply($script_name, $param_string, $timeout, $access_token_ttl, $durability, $idempotent_level, $filter_conditions);
  }

  public function send_dispatchScriptCommandTaskNoReply($script_name, $param_string, $timeout, $access_token_ttl, $durability, $idempotent_level, $filter_conditions)
  {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskNoReply_args();
    $args->script_name = $script_name;
    $args->param_string = $param_string;
    $args->timeout = $timeout;
    $args->access_token_ttl = $access_token_ttl;
    $args->durability = $durability;
    $args->idempotent_level = $idempotent_level;
    $args->filter_conditions = $filter_conditions;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dispatchScriptCommandTaskNoReply', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dispatchScriptCommandTaskNoReply', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function dispatchTaskNoReply($worker_name, $job_data, $timeout, $access_token_ttl, $durability, $idempotent_level, $identifier, $filter_conditions)
  {
    $this->send_dispatchTaskNoReply($worker_name, $job_data, $timeout, $access_token_ttl, $durability, $idempotent_level, $identifier, $filter_conditions);
  }

  public function send_dispatchTaskNoReply($worker_name, $job_data, $timeout, $access_token_ttl, $durability, $idempotent_level, $identifier, $filter_conditions)
  {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchTaskNoReply_args();
    $args->worker_name = $worker_name;
    $args->job_data = $job_data;
    $args->timeout = $timeout;
    $args->access_token_ttl = $access_token_ttl;
    $args->durability = $durability;
    $args->idempotent_level = $idempotent_level;
    $args->identifier = $identifier;
    $args->filter_conditions = $filter_conditions;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dispatchTaskNoReply', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dispatchTaskNoReply', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class RemoteQueuedRPC_dispatchScriptCommandTaskSimple_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $script_name = null;
  /**
   * @var string
   */
  public $param_string = null;
  /**
   * @var int
   */
  public $timeout = null;
  /**
   * @var string
   */
  public $filter_conditions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'script_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'param_string',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timeout',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'filter_conditions',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['script_name'])) {
        $this->script_name = $vals['script_name'];
      }
      if (isset($vals['param_string'])) {
        $this->param_string = $vals['param_string'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['filter_conditions'])) {
        $this->filter_conditions = $vals['filter_conditions'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchScriptCommandTaskSimple_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->script_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filter_conditions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchScriptCommandTaskSimple_args');
    if ($this->script_name !== null) {
      $xfer += $output->writeFieldBegin('script_name', TType::STRING, 1);
      $xfer += $output->writeString($this->script_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param_string !== null) {
      $xfer += $output->writeFieldBegin('param_string', TType::STRING, 2);
      $xfer += $output->writeString($this->param_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 3);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_conditions !== null) {
      $xfer += $output->writeFieldBegin('filter_conditions', TType::STRING, 4);
      $xfer += $output->writeString($this->filter_conditions);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchScriptCommandTaskSimple_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchScriptCommandTaskSimple_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchScriptCommandTaskSimple_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchScriptCommandTask_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $script_name = null;
  /**
   * @var string
   */
  public $param_string = null;
  /**
   * @var int
   */
  public $timeout = null;
  /**
   * @var int
   */
  public $access_token_ttl = null;
  /**
   * @var bool
   */
  public $durability = null;
  /**
   * @var int
   */
  public $idempotent_level = null;
  /**
   * @var string
   */
  public $filter_conditions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'script_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'param_string',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timeout',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'access_token_ttl',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'durability',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'idempotent_level',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'filter_conditions',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['script_name'])) {
        $this->script_name = $vals['script_name'];
      }
      if (isset($vals['param_string'])) {
        $this->param_string = $vals['param_string'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['access_token_ttl'])) {
        $this->access_token_ttl = $vals['access_token_ttl'];
      }
      if (isset($vals['durability'])) {
        $this->durability = $vals['durability'];
      }
      if (isset($vals['idempotent_level'])) {
        $this->idempotent_level = $vals['idempotent_level'];
      }
      if (isset($vals['filter_conditions'])) {
        $this->filter_conditions = $vals['filter_conditions'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchScriptCommandTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->script_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_token_ttl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->durability);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idempotent_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filter_conditions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchScriptCommandTask_args');
    if ($this->script_name !== null) {
      $xfer += $output->writeFieldBegin('script_name', TType::STRING, 1);
      $xfer += $output->writeString($this->script_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param_string !== null) {
      $xfer += $output->writeFieldBegin('param_string', TType::STRING, 2);
      $xfer += $output->writeString($this->param_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 3);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_token_ttl !== null) {
      $xfer += $output->writeFieldBegin('access_token_ttl', TType::I32, 4);
      $xfer += $output->writeI32($this->access_token_ttl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->durability !== null) {
      $xfer += $output->writeFieldBegin('durability', TType::BOOL, 5);
      $xfer += $output->writeBool($this->durability);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idempotent_level !== null) {
      $xfer += $output->writeFieldBegin('idempotent_level', TType::I32, 6);
      $xfer += $output->writeI32($this->idempotent_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_conditions !== null) {
      $xfer += $output->writeFieldBegin('filter_conditions', TType::STRING, 7);
      $xfer += $output->writeString($this->filter_conditions);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchScriptCommandTask_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchScriptCommandTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchScriptCommandTask_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchWebShellCallTask_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $domain = null;
  /**
   * @var string
   */
  public $input = null;
  /**
   * @var string
   */
  public $worker_space = null;
  /**
   * @var string
   */
  public $filter_conditions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'domain',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'input',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'worker_space',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'filter_conditions',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['domain'])) {
        $this->domain = $vals['domain'];
      }
      if (isset($vals['input'])) {
        $this->input = $vals['input'];
      }
      if (isset($vals['worker_space'])) {
        $this->worker_space = $vals['worker_space'];
      }
      if (isset($vals['filter_conditions'])) {
        $this->filter_conditions = $vals['filter_conditions'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchWebShellCallTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worker_space);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filter_conditions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchWebShellCallTask_args');
    if ($this->domain !== null) {
      $xfer += $output->writeFieldBegin('domain', TType::STRING, 1);
      $xfer += $output->writeString($this->domain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->input !== null) {
      $xfer += $output->writeFieldBegin('input', TType::STRING, 2);
      $xfer += $output->writeString($this->input);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worker_space !== null) {
      $xfer += $output->writeFieldBegin('worker_space', TType::STRING, 3);
      $xfer += $output->writeString($this->worker_space);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_conditions !== null) {
      $xfer += $output->writeFieldBegin('filter_conditions', TType::STRING, 4);
      $xfer += $output->writeString($this->filter_conditions);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchWebShellCallTask_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchWebShellCallTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchWebShellCallTask_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchTask_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $worker_name = null;
  /**
   * @var string
   */
  public $job_data = null;
  /**
   * @var int
   */
  public $timeout = null;
  /**
   * @var int
   */
  public $access_token_ttl = null;
  /**
   * @var bool
   */
  public $durability = null;
  /**
   * @var int
   */
  public $idempotent_level = null;
  /**
   * @var string
   */
  public $identifier = null;
  /**
   * @var string
   */
  public $filter_conditions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'worker_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_data',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timeout',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'access_token_ttl',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'durability',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'idempotent_level',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'identifier',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'filter_conditions',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['worker_name'])) {
        $this->worker_name = $vals['worker_name'];
      }
      if (isset($vals['job_data'])) {
        $this->job_data = $vals['job_data'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['access_token_ttl'])) {
        $this->access_token_ttl = $vals['access_token_ttl'];
      }
      if (isset($vals['durability'])) {
        $this->durability = $vals['durability'];
      }
      if (isset($vals['idempotent_level'])) {
        $this->idempotent_level = $vals['idempotent_level'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['filter_conditions'])) {
        $this->filter_conditions = $vals['filter_conditions'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worker_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_token_ttl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->durability);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idempotent_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filter_conditions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchTask_args');
    if ($this->worker_name !== null) {
      $xfer += $output->writeFieldBegin('worker_name', TType::STRING, 1);
      $xfer += $output->writeString($this->worker_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_data !== null) {
      $xfer += $output->writeFieldBegin('job_data', TType::STRING, 2);
      $xfer += $output->writeString($this->job_data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 3);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_token_ttl !== null) {
      $xfer += $output->writeFieldBegin('access_token_ttl', TType::I32, 4);
      $xfer += $output->writeI32($this->access_token_ttl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->durability !== null) {
      $xfer += $output->writeFieldBegin('durability', TType::BOOL, 5);
      $xfer += $output->writeBool($this->durability);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idempotent_level !== null) {
      $xfer += $output->writeFieldBegin('idempotent_level', TType::I32, 6);
      $xfer += $output->writeI32($this->idempotent_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 7);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_conditions !== null) {
      $xfer += $output->writeFieldBegin('filter_conditions', TType::STRING, 8);
      $xfer += $output->writeString($this->filter_conditions);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchTask_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchTask_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_getJobState_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $access_token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'access_token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['access_token'])) {
        $this->access_token = $vals['access_token'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_getJobState_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->access_token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_getJobState_args');
    if ($this->access_token !== null) {
      $xfer += $output->writeFieldBegin('access_token', TType::STRING, 1);
      $xfer += $output->writeString($this->access_token);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_getJobState_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_getJobState_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_getJobState_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchScriptCommandTaskSimpleNoReply_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $script_name = null;
  /**
   * @var string
   */
  public $param_string = null;
  /**
   * @var int
   */
  public $timeout = null;
  /**
   * @var string
   */
  public $filter_conditions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'script_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'param_string',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timeout',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'filter_conditions',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['script_name'])) {
        $this->script_name = $vals['script_name'];
      }
      if (isset($vals['param_string'])) {
        $this->param_string = $vals['param_string'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['filter_conditions'])) {
        $this->filter_conditions = $vals['filter_conditions'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchScriptCommandTaskSimpleNoReply_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->script_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filter_conditions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchScriptCommandTaskSimpleNoReply_args');
    if ($this->script_name !== null) {
      $xfer += $output->writeFieldBegin('script_name', TType::STRING, 1);
      $xfer += $output->writeString($this->script_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param_string !== null) {
      $xfer += $output->writeFieldBegin('param_string', TType::STRING, 2);
      $xfer += $output->writeString($this->param_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 3);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_conditions !== null) {
      $xfer += $output->writeFieldBegin('filter_conditions', TType::STRING, 4);
      $xfer += $output->writeString($this->filter_conditions);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchScriptCommandTaskNoReply_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $script_name = null;
  /**
   * @var string
   */
  public $param_string = null;
  /**
   * @var int
   */
  public $timeout = null;
  /**
   * @var int
   */
  public $access_token_ttl = null;
  /**
   * @var bool
   */
  public $durability = null;
  /**
   * @var int
   */
  public $idempotent_level = null;
  /**
   * @var string
   */
  public $filter_conditions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'script_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'param_string',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timeout',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'access_token_ttl',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'durability',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'idempotent_level',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'filter_conditions',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['script_name'])) {
        $this->script_name = $vals['script_name'];
      }
      if (isset($vals['param_string'])) {
        $this->param_string = $vals['param_string'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['access_token_ttl'])) {
        $this->access_token_ttl = $vals['access_token_ttl'];
      }
      if (isset($vals['durability'])) {
        $this->durability = $vals['durability'];
      }
      if (isset($vals['idempotent_level'])) {
        $this->idempotent_level = $vals['idempotent_level'];
      }
      if (isset($vals['filter_conditions'])) {
        $this->filter_conditions = $vals['filter_conditions'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchScriptCommandTaskNoReply_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->script_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param_string);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_token_ttl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->durability);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idempotent_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filter_conditions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchScriptCommandTaskNoReply_args');
    if ($this->script_name !== null) {
      $xfer += $output->writeFieldBegin('script_name', TType::STRING, 1);
      $xfer += $output->writeString($this->script_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param_string !== null) {
      $xfer += $output->writeFieldBegin('param_string', TType::STRING, 2);
      $xfer += $output->writeString($this->param_string);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 3);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_token_ttl !== null) {
      $xfer += $output->writeFieldBegin('access_token_ttl', TType::I32, 4);
      $xfer += $output->writeI32($this->access_token_ttl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->durability !== null) {
      $xfer += $output->writeFieldBegin('durability', TType::BOOL, 5);
      $xfer += $output->writeBool($this->durability);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idempotent_level !== null) {
      $xfer += $output->writeFieldBegin('idempotent_level', TType::I32, 6);
      $xfer += $output->writeI32($this->idempotent_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_conditions !== null) {
      $xfer += $output->writeFieldBegin('filter_conditions', TType::STRING, 7);
      $xfer += $output->writeString($this->filter_conditions);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPC_dispatchTaskNoReply_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $worker_name = null;
  /**
   * @var string
   */
  public $job_data = null;
  /**
   * @var int
   */
  public $timeout = null;
  /**
   * @var int
   */
  public $access_token_ttl = null;
  /**
   * @var bool
   */
  public $durability = null;
  /**
   * @var int
   */
  public $idempotent_level = null;
  /**
   * @var string
   */
  public $identifier = null;
  /**
   * @var string
   */
  public $filter_conditions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'worker_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'job_data',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timeout',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'access_token_ttl',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'durability',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'idempotent_level',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'identifier',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'filter_conditions',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['worker_name'])) {
        $this->worker_name = $vals['worker_name'];
      }
      if (isset($vals['job_data'])) {
        $this->job_data = $vals['job_data'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['access_token_ttl'])) {
        $this->access_token_ttl = $vals['access_token_ttl'];
      }
      if (isset($vals['durability'])) {
        $this->durability = $vals['durability'];
      }
      if (isset($vals['idempotent_level'])) {
        $this->idempotent_level = $vals['idempotent_level'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['filter_conditions'])) {
        $this->filter_conditions = $vals['filter_conditions'];
      }
    }
  }

  public function getName() {
    return 'RemoteQueuedRPC_dispatchTaskNoReply_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worker_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_token_ttl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->durability);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idempotent_level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filter_conditions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoteQueuedRPC_dispatchTaskNoReply_args');
    if ($this->worker_name !== null) {
      $xfer += $output->writeFieldBegin('worker_name', TType::STRING, 1);
      $xfer += $output->writeString($this->worker_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_data !== null) {
      $xfer += $output->writeFieldBegin('job_data', TType::STRING, 2);
      $xfer += $output->writeString($this->job_data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I32, 3);
      $xfer += $output->writeI32($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_token_ttl !== null) {
      $xfer += $output->writeFieldBegin('access_token_ttl', TType::I32, 4);
      $xfer += $output->writeI32($this->access_token_ttl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->durability !== null) {
      $xfer += $output->writeFieldBegin('durability', TType::BOOL, 5);
      $xfer += $output->writeBool($this->durability);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idempotent_level !== null) {
      $xfer += $output->writeFieldBegin('idempotent_level', TType::I32, 6);
      $xfer += $output->writeI32($this->idempotent_level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 7);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter_conditions !== null) {
      $xfer += $output->writeFieldBegin('filter_conditions', TType::STRING, 8);
      $xfer += $output->writeString($this->filter_conditions);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoteQueuedRPCProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_dispatchScriptCommandTaskSimple($seqid, $input, $output) {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskSimple_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskSimple_result();
    $result->success = $this->handler_->dispatchScriptCommandTaskSimple($args->script_name, $args->param_string, $args->timeout, $args->filter_conditions);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'dispatchScriptCommandTaskSimple', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('dispatchScriptCommandTaskSimple', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_dispatchScriptCommandTask($seqid, $input, $output) {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTask_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTask_result();
    $result->success = $this->handler_->dispatchScriptCommandTask($args->script_name, $args->param_string, $args->timeout, $args->access_token_ttl, $args->durability, $args->idempotent_level, $args->filter_conditions);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'dispatchScriptCommandTask', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('dispatchScriptCommandTask', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_dispatchWebShellCallTask($seqid, $input, $output) {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchWebShellCallTask_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchWebShellCallTask_result();
    $result->success = $this->handler_->dispatchWebShellCallTask($args->domain, $args->input, $args->worker_space, $args->filter_conditions);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'dispatchWebShellCallTask', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('dispatchWebShellCallTask', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_dispatchTask($seqid, $input, $output) {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchTask_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchTask_result();
    $result->success = $this->handler_->dispatchTask($args->worker_name, $args->job_data, $args->timeout, $args->access_token_ttl, $args->durability, $args->idempotent_level, $args->identifier, $args->filter_conditions);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'dispatchTask', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('dispatchTask', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getJobState($seqid, $input, $output) {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_getJobState_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \NG_RPC\Thrift\RemoteQueuedRPC_getJobState_result();
    $result->success = $this->handler_->getJobState($args->access_token);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getJobState', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getJobState', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_dispatchScriptCommandTaskSimpleNoReply($seqid, $input, $output) {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskSimpleNoReply_args();
    $args->read($input);
    $input->readMessageEnd();
    $this->handler_->dispatchScriptCommandTaskSimpleNoReply($args->script_name, $args->param_string, $args->timeout, $args->filter_conditions);
    return;
  }
  protected function process_dispatchScriptCommandTaskNoReply($seqid, $input, $output) {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchScriptCommandTaskNoReply_args();
    $args->read($input);
    $input->readMessageEnd();
    $this->handler_->dispatchScriptCommandTaskNoReply($args->script_name, $args->param_string, $args->timeout, $args->access_token_ttl, $args->durability, $args->idempotent_level, $args->filter_conditions);
    return;
  }
  protected function process_dispatchTaskNoReply($seqid, $input, $output) {
    $args = new \NG_RPC\Thrift\RemoteQueuedRPC_dispatchTaskNoReply_args();
    $args->read($input);
    $input->readMessageEnd();
    $this->handler_->dispatchTaskNoReply($args->worker_name, $args->job_data, $args->timeout, $args->access_token_ttl, $args->durability, $args->idempotent_level, $args->identifier, $args->filter_conditions);
    return;
  }
}

